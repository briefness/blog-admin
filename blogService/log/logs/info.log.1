{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"开始发布","time":"2019-03-06T08:00:46.774Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"fieldCount":0,"affectedRows":1,"insertId":24,"serverStatus":2,"warningCount":0,"message":"","protocol41":true,"changedRows":0,"msg":"","time":"2019-03-06T08:00:46.837Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"发布成功","time":"2019-03-06T08:00:46.837Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"开始获取博客列表","time":"2019-03-06T08:00:46.892Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"博客列表： [ { articleId: 14,\n    publishTime: '2018.07.17 16:59',\n    blogTitle: '文章标题',\n    blogContent:\n     '限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数...',\n    relatedImg:\n     'http://upload-images.jianshu.io/upload_images/2239034-051aa6a34c3c1100.png?imageMogr2/auto-orient/strip|imageView2/1/w/300/h/240',\n    pageView: 0,\n    reply: 0,\n    like: 100,\n    avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n    userName: undefined },\n  { articleId: 15,\n    publishTime: '2018.07.17 17:00',\n    blogTitle: '文章标题',\n    blogContent:\n     '限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数，超出部分显示这里是文章的内容，限制显示字数...',\n    relatedImg: '',\n    pageView: 0,\n    reply: 0,\n    like: 201,\n    avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n    userName: undefined },\n  { articleId: 17,\n    publishTime: '2018.07.20 16:59',\n    blogTitle: '无标题文章',\n    blogContent: 'haodednlncjfnv',\n    relatedImg:\n     'http://127.0.0.1:7777/resource/fd5b1a554465d4f075d2f91e4edba067.png',\n    pageView: 0,\n    reply: 0,\n    like: 300,\n    avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n    userName: undefined },\n  { articleId: 18,\n    publishTime: '2018.07.20 17:22',\n    blogTitle: '无标题文章',\n    blogContent: '我开始了不是眨眼，你如果展演的话，你会错过最精彩的便读',\n    relatedImg:\n     'http://127.0.0.1:7777/resource/fd5b1a554465d4f075d2f91e4edba067.png',\n    pageView: 0,\n    reply: 0,\n    like: 400,\n    avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n    userName: undefined },\n  { articleId: 20,\n    publishTime: '2018.07.23 14:32',\n    blogTitle: '无标题文章',\n    blogContent: '我又来测试了',\n    relatedImg:\n     'http://127.0.0.1:7777/resource/fd5b1a554465d4f075d2f91e4edba067.png',\n    pageView: 0,\n    reply: 0,\n    like: 783,\n    avatar:\n     'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532336898040&di=86307303feaff8edcbbb971f6f8923aa&imgtype=0&src=http%3A%2F%2Ftvax1.sinaimg.cn%2Fcrop.0.0.996.996.1024%2F005X7W89ly8fm6a9qh9noj30ro0ro0v4.jpg',\n    userName: undefined },\n  { articleId: 21,\n    publishTime: '2018.07.23 14:37',\n    blogTitle: '无标题文章',\n    blogContent: '发热发热分    ',\n    relatedImg:\n     'http://127.0.0.1:7777/resource/fd5b1a554465d4f075d2f91e4edba067.png',\n    pageView: 0,\n    reply: 0,\n    like: 10001,\n    avatar:\n     'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532336898040&di=86307303feaff8edcbbb971f6f8923aa&imgtype=0&src=http%3A%2F%2Ftvax1.sinaimg.cn%2Fcrop.0.0.996.996.1024%2F005X7W89ly8fm6a9qh9noj30ro0ro0v4.jpg',\n    userName: undefined },\n  { articleId: 22,\n    publishTime: '2018.07.23 15:02',\n    blogTitle: '无标题文章',\n    blogContent: '的我v',\n    relatedImg:\n     'http://127.0.0.1:7777/resource/fd5b1a554465d4f075d2f91e4edba067.png',\n    pageView: 0,\n    reply: 0,\n    like: 2,\n    avatar:\n     'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1532336898040&di=86307303feaff8edcbbb971f6f8923aa&imgtype=0&src=http%3A%2F%2Ftvax1.sinaimg.cn%2Fcrop.0.0.996.996.1024%2F005X7W89ly8fm6a9qh9noj30ro0ro0v4.jpg',\n    userName: undefined },\n  { articleId: 23,\n    publishTime: '2019.02.28 17:51',\n    blogTitle: '无标题文章',\n    blogContent: '',\n    relatedImg:\n     'http://127.0.0.1:9000/resource/560d0d3c284f85f731e4e2fdda4dee85.jpeg',\n    pageView: 0,\n    reply: 0,\n    like: 0,\n    avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n    userName: undefined },\n  { articleId: 24,\n    publishTime: '2019.03.06 16:00',\n    blogTitle: '一个简单的webjson编辑器',\n    blogContent: '在实现需求的过程中，需要对权限进行编辑，具体的一张图表示吧。<br />',\n    relatedImg: 'http://127.0.0.1:9000/resource/image.png',\n    pageView: 0,\n    reply: 0,\n    like: 0,\n    avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n    userName: undefined } ]","time":"2019-03-06T08:00:46.903Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"获取博客列表完成","time":"2019-03-06T08:00:46.904Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"开始获取博客详情","time":"2019-03-06T08:00:50.434Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"开始获取博客评论","time":"2019-03-06T08:00:50.437Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"获取博客详情完成","time":"2019-03-06T08:00:50.441Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"获取博客评论完成","time":"2019-03-06T08:00:50.472Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"博客详情信息： { blogContentHtml:\n   '<p>在实现需求的过程中，需要对权限进行编辑，具体的一张图表示吧。<br />\\n<img src=\"http://127.0.0.1:9000/resource/image.png\" alt=\"image.png\" /></p>\\n<p>传入一个json，可以对其进行编辑，并有规则验证和回撤功能。</p>\\n<p>当时收到需求的时候，第一时间想到的是手撸一个组件，但是撸到一半（不要多想，撸代码）发现坑太多，自己手撸太不划算。</p>\\n<p>然后打算找一些符合或者稍微符合的第三方的插件，然后修改源码成自己需要的，然后github整理了一些基于vue实现的json编辑器。</p>\\n<p>以下只是做一个简单的收录，如果遇到适合使用的，请自行去官网查看api，在此不再赘述，值得注意的是以下json编辑器都是基于vue。</p>\\n<p>1.json-schema-editor</p>\\n<p>2.json-editor</p>\\n<p>3.vue-json-edit</p>\\n<p>上面几个json编辑器，功能太强大了，但与希望的天差地别，改源码的功夫，感觉重新撸一个了（陷入瓶颈）。</p>\\n<p>说撸就撸，准备撸，说正题，实现一个json编辑起码需要，编辑器和json规则校验，挑了许久，发现了合适的第三方库(CodeMirrorr 和 json-lint)。</p>\\n<p>开始撸，等下，发现vue-element-admin中有相似的功能，山重水复疑无路，柳暗花明代码现，省了时间，直接看代码喽（偷笑）</p>\\n<p>首先安装依赖script-loader，jsonlint， codemirror</p>\\n<p>jsonEditor.vue</p>\\n<template>\\n  <div class=\"json-editor\">\\n    <textarea ref=\"textarea\" />\\n  </div>\\n</template>\\n<script>\\nimport CodeMirror from \"codemirror\";\\nimport \"codemirror/addon/lint/lint.css\";\\nimport \"codemirror/lib/codemirror.css\";\\nimport \"codemirror/theme/rubyblue.css\";\\nimport \"codemirror/mode/javascript/javascript\";\\nimport \"codemirror/addon/lint/lint\";\\nimport \"codemirror/addon/lint/json-lint\";\\nrequire(\"script-loader!jsonlint\");\\nexport default {\\n\\tname: \"JsonEditor\",\\n\\t/* eslint-disable vue/require-prop-types */\\n\\tprops: {\\n\\t\\tvalue: {\\n\\t\\t\\ttype: Object,\\n\\t\\t\\tdefault() {\\n\\t\\t\\t\\treturn {};\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t// 是否只读，默认否\\n\\t\\treadOnly: {\\n\\t\\t\\ttype: Boolean,\\n\\t\\t\\tdefault: false,\\n\\t\\t},\\n\\t},\\n\\tdata() {\\n\\t\\treturn {\\n\\t\\t\\tjsonEditor: null,\\n\\t\\t};\\n\\t},\\n\\twatch: {\\n\\t\\tvalue(value) {\\n\\t\\t\\tconst editorValue = this.jsonEditor.getValue();\\n\\t\\t\\tif (value !== editorValue) {\\n\\t\\t\\t\\tthis.jsonEditor.setValue(JSON.stringify(this.value, null, 8));\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t},\\n\\tmounted() {\\n\\t\\tthis.initJsonEditor();\\n\\t\\tthis.jsonEditor.setOption(\"readOnly\", this.readOnly);\\n\\t},\\n\\tmethods: {\\n\\t\\t// 初始化jsonEditor\\n\\t\\tinitJsonEditor() {\\n\\t\\t\\tthis.jsonEditor = CodeMirror.fromTextArea(this.$refs.textarea, {\\n\\t\\t\\t\\tlineNumbers: true,\\n\\t\\t\\t\\tmode: \"application/json\",\\n\\t\\t\\t\\tgutters: [\"CodeMirror-lint-markers\"],\\n\\t\\t\\t\\t// theme: \"rubyblue\",\\n\\t\\t\\t\\tlint: true,\\n\\t\\t\\t});\\n\\t\\t\\tthis.jsonEditor.setValue(JSON.stringify(this.value, null, 8));\\n\\t\\t\\tthis.jsonEditor.on(\"change\", cm => {\\n\\t\\t\\t\\tthis.$emit(\"changed\", cm.getValue());\\n\\t\\t\\t\\tthis.$emit(\"input\", cm.getValue());\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\t// 获取json\\n\\t\\tgetValue() {\\n\\t\\t\\treturn this.jsonEditor.getValue();\\n\\t\\t},\\n\\t},\\n};\\n</script>\\n<style lang=\"scss\">\\n.json-editor {\\n  height: 300px;\\n  overflow-y: auto;\\n  position: relative;\\n  font-size: 14px;\\n  width: 800px;\\n  border: 1px solid #ddd;\\n  .CodeMirror {\\n    height: auto;\\n    min-height: 300px;\\n    .CodeMirror-line {\\n      line-height: 1.5;\\n    }\\n  }\\n  .CodeMirror-scroll {\\n    min-height: 300px;\\n  }\\n  .CodeMirror-linenumber {\\n    color: #2b91af;\\n    height: 21px;\\n    line-height: 21px;\\n  }\\n  .CodeMirror-gutters {\\n    background-color: #fff;\\n    border-right: 0;\\n  }\\n  span.cm-string {\\n    color: #f08047;\\n  }\\n}\\n</style>\\n<p>到此一个简单的jsonEditor就实现了，之后就是按需求做相应的配置，并调用了。</p>\\n<p>import jsonEditor from “./jsonEdit.vue”;</p>\\n<pre><code>components: {\\n\\tjsonEditor,\\n},\\n</code></pre>\\n<p><jsonEditor\\n              :value=\"jsonData\"\\n              :read-only=\"true\"/><br />\\noptions 可以使用的参数<br />\\nCodeMirror函数和它的fromTextArea方法都可以使用一个配置对象作为第二个参数。</p>\\n<p>value: string | CodeMirror.Doc</p>\\n<p>编辑器的初始值（文本），可以是字符串或者CodeMirror文档对象(不同于HTML文档对象)。</p>\\n<p>mode: string | object</p>\\n<p>通用的或者在CodeMirror中使用的与mode相关联的mime，当不设置这个值的时候，会默认使用第一个载入的mode定义文件。一般地，会使用关联的mime类型来设置这个值；除此之外，也可以使用一个带有name属性的对象来作为值（如：{name: “JavaScript”, json: true}）。可以通过访问CodeMirror.modes和CodeMirror.mimeModes获取定义的mode和MIME。</p>\\n<p>lineSeparator: string|null</p>\\n<p>明确指定编辑器使用的行分割符（换行符）。默认（值为null）情况下，文档会被 CRLF(以及单独的CR, LF)分割，单独的LF会在所有的输出中用作换行符（如：getValue）。当指定了换行字符串，行就只会被指定的串分割。</p>\\n<p>theme: string(主题)</p>\\n<p>配置编辑器的主题样式。要使用主题，必须保证名称为 .cm-s-[name] (name是设置的theme的值)的样式是加载上了的。当然，你也可以一次加载多个主题样式，使用方法和html和使用类一样，如： theme: foo bar，那么此时需要cm-s-foo cm-s-bar这两个样式都已经被加载上了。</p>\\n<p>indentUnit: integer</p>\\n<p>缩进单位，值为空格数，默认为2 。</p>\\n<p>smartIndent: boolean</p>\\n<p>自动缩进，设置是否根据上下文自动缩进（和上一行相同的缩进量）。默认为true。</p>\\n<p>abSize: integer</p>\\n<p>tab字符的宽度，默认为4 。</p>\\n<p>indentWithTabs: boolean</p>\\n<p>在缩进时，是否需要把 n*tab宽度个空格替换成n个tab字符，默认为false 。</p>\\n<p>electricChars: boolean</p>\\n<p>在输入可能改变当前的缩进时，是否重新缩进，默认为true （仅在mode支持缩进时有效）。</p>\\n<p>specialChars: RegExp</p>\\n<p>需要被占位符(placeholder)替换的特殊字符的正则表达式。最常用的是非打印字符。默认为：/[\\\\u0000-\\\\u0019\\\\u00ad\\\\u200b-\\\\u200f\\\\u2028\\\\u2029\\\\ufeff]/。</p>\\n<p>specialCharPlaceholder: function(char) → Element</p>\\n<p>这是一个接收由specialChars选项指定的字符作为参数的函数，此函数会产生一个用来显示指定字符的DOM节点。默认情况下，显示一个红点（•），这个红点有一个带有前面特殊字符编码的提示框。</p>\\n<p>keyMap: string</p>\\n<p>配置快捷键。默认值为default，即 codemorrir.js 内部定义。其它在key map目录下。</p>\\n<p>extraKeys: object</p>\\n<p>给编辑器绑定与前面keyMap配置不同的快捷键。</p>\\n<p>lineWrapping: boolean</p>\\n<p>在长行时文字是换行(wrap)还是滚动(scroll)，默认为滚动(scroll)。</p>\\n<p>lineNumbers: boolean</p>\\n<p>是否在编辑器左侧显示行号。</p>\\n<p>firstLineNumber: integer</p>\\n<p>行号从哪个数开始计数，默认为1 。</p>\\n<p>lineNumberFormatter: function(line: integer) → string</p>\\n<p>使用一个函数设置行号。</p>\\n<p>gutters: array</p>\\n<p>用来添加额外的gutter（在行号gutter前或代替行号gutter）。值应该是CSS名称数组，每一项定义了用于绘制gutter背景的宽度（还有可选的背景）。为了能明确设置行号gutter的位置（默认在所有其它gutter的右边），也可以包含CodeMirror-linenumbers类。类名是用于传给setGutterMarker的键名(keys)。</p>\\n<p>fixedGutter: boolean</p>\\n<p>设置gutter跟随编辑器内容水平滚动（false）还是固定在左侧（true或默认）。</p>\\n<p>scrollbarStyle: string</p>\\n<p>设置滚动条。默认为”native”，显示原生的滚动条。核心库还提供了”null”样式，此样式会完全隐藏滚动条。Addons可以设置更多的滚动条模式。</p>\\n<p>coverGutterNextToScrollbar: boolean</p>\\n<p>当fixedGutter启用，并且存在水平滚动条时，在滚动条最左侧默认会显示gutter，当此项设置为true时，gutter会被带有CodeMirror-gutter-filler类的元素遮挡。</p>\\n<p>inputStyle: string</p>\\n<p>选择CodeMirror处理输入和焦点的方式。核心库定义了textarea和contenteditable输入模式。在移动浏览器上，默认是contenteditable，在桌面浏览器上，默认是textarea。在contenteditable模式下对IME和屏幕阅读器支持更好。</p>\\n<p>readOnly: boolean|string</p>\\n<p>编辑器是否只读。如果设置为预设的值 “nocursor”，那么除了设置只读外，编辑区域还不能获得焦点。</p>\\n<p>showCursorWhenSelecting: boolean</p>\\n<p>在选择时是否显示光标，默认为false。</p>\\n<p>lineWiseCopyCut: boolean</p>\\n<p>启用时，如果在复制或剪切时没有选择文本，那么就会自动操作光标所在的整行。</p>\\n<p>undoDepth: integer</p>\\n<p>最大撤消次数，默认为200（包括选中内容改变事件） 。</p>\\n<p>historyEventDelay: integer</p>\\n<p>在输入或删除时引发历史事件前的毫秒数。</p>\\n<p>tabindex: integer</p>\\n<p>编辑器的tabindex。</p>\\n<p>autofocus: boolean</p>\\n<p>是否在初始化时自动获取焦点。默认情况是关闭的。但是，在使用textarea并且没有明确指定值的时候会被自动设置为true。</p>\\n<p>低级选项<br />\\n下面的选项仅用于一些特殊情况。</p>\\n<p>dragDrop: boolean</p>\\n<p>是否允许拖放，默认为true。</p>\\n<p>allowDropFileTypes: array</p>\\n<p>默认为null。当设置此项时，只接收包含在此数组内的文件类型拖入编辑器。文件类型为MIME名称。</p>\\n<p>cursorBlinkRate: number</p>\\n<p>光标闪动的间隔，单位为毫秒。默认为530。当设置为0时，会禁用光标闪动。负数会隐藏光标。</p>\\n<p>cursorScrollMargin: number</p>\\n<p>当光标靠近可视区域边界时，光标距离上方和下方的距离。默认为0 。</p>\\n<p>cursorHeight: number</p>\\n<p>光标高度。默认为1，也就是撑满行高。对一些字体，设置0.85看起来会更好。</p>\\n<p>resetSelectionOnContextMenu: boolean</p>\\n<p>设置在选择文本外点击打开上下文菜单时，是否将光标移动到点击处。默认为true。</p>\\n<p>workTime, workDelay: number</p>\\n<p>通过一个假的后台线程高亮 workTime 时长，然后使用 timeout 休息 workDelay 时长。默认为200和300 。（完全不懂这个功能是在说啥）</p>\\n<p>pollInterval: number</p>\\n<p>指明CodeMirror向对应的textarea滚动（写数据）的速度（获得焦点时）。大多数的输入都是通过事件捕获，但是有的输入法（如IME）在某些浏览器上并不会生成事件，所以使用数据滚动。默认为100毫秒。</p>\\n<p>flattenSpans: boolean</p>\\n<p>默认情况下，CodeMirror会将使用相同class的两个span合并成一个。通过设置此项为false禁用此功能。</p>\\n<p>addModeClass: boolean</p>\\n<p>当启用时（默认禁用），会给每个标记添加额外的表示生成标记的mode的以cm-m开头的CSS样式类。例如，XML mode产生的标记，会添加cm-m-xml类。</p>\\n<p>maxHighlightLength: number</p>\\n<p>当需要高亮很长的行时，为了保持响应性能，当到达某些位置时，编辑器会直接将其他行设置为纯文本(plain text)。默认为10000，可以设置为Infinity来关闭此功能。</p>\\n<p>viewportMargin: integer</p>\\n<p>指定当前滚动到视图中内容上方和下方要渲染的行数。这会影响到滚动时要更新的行数。通常情况下应该使用默认值10。可以设置值为Infinity始终渲染整个文档。注意：这样设置在处理大文档时会影响性能。</p>\\n<p>到此为止，已经基本实现了所需要的功能，在此做一个记录，欢迎纠错补充。</p>\\n',\n  title: '一个简单的webjson编辑器',\n  userName: 'root',\n  publishTime: '2019.03.06 16:00',\n  sex: 0,\n  avatar: 'https://i.loli.net/2017/08/21/599a521472424.jpg',\n  likes: 0,\n  state: 0 }","time":"2019-03-06T08:00:50.478Z","v":0}
{"name":"website name","hostname":"bogon","pid":77434,"level":30,"msg":"博客评论信息： []","time":"2019-03-06T08:00:50.481Z","v":0}
